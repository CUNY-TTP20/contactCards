{"version":3,"sources":["component/css/card.module.css","component/contactCard.jsx","component/contactForm.jsx","component/contactBoard.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","ContactCard","className","classes","card","this","props","cusName","mobileNo","workNo","email","Component","ContactForm","handleSubmit","event","preventDefault","onSubmit","state","name","mobileNum","workNum","Email","handleChange","value","target","setState","type","placeholder","onChange","ContactBoard","addCard","mobile","work","newState","newCard","cards","concat","topPart","board","map","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.ea42cd3b.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"card_card__RocFL\",\"board\":\"card_board__1JNNj\",\"topPart\":\"card_topPart__1aNSr\"};","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport classes from \"./css/card.module.css\";\r\n\r\nclass ContactCard extends Component{\r\n    render() {\r\n        return (<div className={classes.card}>\r\n            <h1>{this.props.cusName}</h1>\r\n            <ul>\r\n                <li>Mobile : {this.props.mobileNo}</li>\r\n                <li>Work : {this.props.workNo}</li>\r\n                <li>Email : {this.props.email}</li>\r\n            </ul>\r\n        </div>);\r\n    }\r\n}\r\nContactCard.propTypes = {\r\n    name: PropTypes.string.isRequired,\r\n    Mobile: PropTypes.string.isRequired,\r\n    workNo: PropTypes.string,\r\n    Email: PropTypes.string.isRequired\r\n}\r\nexport default ContactCard;","import React, { Component } from \"react\";\r\n\r\nclass ContactForm extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            name: \"\",\r\n            mobileNum: \"\",\r\n            workNum: \"\",\r\n            Email: \"\"\r\n        }\r\n    }\r\n    handleSubmit = (event) => {\r\n        event.preventDefault();\r\n        this.props.onSubmit(this.state.name, this.state.mobileNum, this.state.workNum, this.state.Email);\r\n    }\r\n    handleChange = (event) => {\r\n        const value = event.target.value;\r\n        this.setState({\r\n            ...this.state, [event.target.name]: value\r\n        });\r\n    }\r\n    render() {\r\n       return( <div>\r\n            <form onSubmit={this.handleSubmit}>\r\n               <input type=\"text\" name=\"name\" placeholder=\"someName\" onChange={this.handleChange} value={this.state.name}></input>&emsp;\r\n                <input type=\"text\" name=\"mobileNum\" placeholder=\"Mobile Number\" onChange={this.handleChange} value={this.state.mobileNum}></input><br/>\r\n               <input type=\"text\" name=\"workNum\" placeholder=\"Work Number\" onChange={this.handleChange} value={this.state.workNum}></input><br/>  \r\n               <input type=\"email\" name=\"Email\" placeholder=\"email address\" onChange={this.handleChange} value={this.state.Email}></input><br/>\r\n                <button>Add</button>\r\n            </form>\r\n        </div>)\r\n    }\r\n}\r\nexport default ContactForm;","import React, { Component } from 'react';\r\nimport ContactCard from \"./contactCard\";\r\nimport ContactForm from \"./contactForm\";\r\nimport classes from \"./css/card.module.css\";\r\nclass ContactBoard extends Component{\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            cards :[{\r\n                name: \"Guy Doe\",\r\n                mobileNum: \"112233445\",\r\n                workNum: \"205467772\",\r\n                Email: \"amel@somemail.com\"\r\n            }, {\r\n                    name: \"Some Doe\",\r\n                    mobileNum: \"110232405\",\r\n                    workNum: \"505467772\",\r\n                    Email: \"mel@omemail.com\"\r\n                }, {\r\n                    name: \"John Doe\",\r\n                    mobileNum: \"112233445\",\r\n                    workNum: \"305467772\",\r\n                    Email: \"amil@somemail.org\"\r\n                } , {\r\n                    name: \"Not Doe\",\r\n                    mobileNum: \"112233445\",\r\n                    workNum: \"105467772\",\r\n                    Email: \"amel@mail.cm\"\r\n                }]\r\n        }\r\n    }\r\n    addCard = (name, mobile, work, email) => {\r\n        const newState = { ...this.state };\r\n        const newCard = {\r\n            name: name,\r\n            mobileNum: mobile,\r\n            workNum: work,\r\n            Email: email\r\n        };\r\n        newState.cards = newState.cards.concat(newCard);\r\n        this.setState(newState);\r\n        \r\n    }\r\n    render() {\r\n        const cards = () => this.state.cards.map((card) => {\r\n            return(<ContactCard\r\n                cusName={card.name}\r\n                mobileNo={card.mobileNum}\r\n                workNo={card.workNum}\r\n                email = {card.Email}\r\n                />);\r\n        });            \r\n        return (\r\n            <div >\r\n                <div className={classes.topPart}>\r\n                <h2>Contact Cards</h2>\r\n                    <div><ContactForm onSubmit={this.addCard} /></div>\r\n                    </div>\r\n                <div className={classes.board}>{cards()}</div>\r\n            </div>);\r\n    }\r\n\r\n    }\r\n\r\n\r\nexport default ContactBoard;","import React from 'react';\r\nimport ContactBoard from \"./component/contactBoard\";\r\nimport './App.css';\r\n\r\nfunction App() {\r\n  return (\r\n    <div className=\"App\">\r\n      <ContactBoard/>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}